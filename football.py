# -*- coding: utf-8 -*-
"""football.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tcxu_iqS3Ovsjc-QlgNkvRC3t_BB1acU
"""

import pandas as pd

df=pd.read_csv("/content/drive/MyDrive/FIFA-2019.csv")
df.head()

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd 
import seaborn as sns
from scipy.stats import norm
import plotly.express as ex
import plotly 
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import LabelEncoder

sns.set(style= 'whitegrid', color_codes=True)
sns.set_theme(context='notebook',style='darkgrid',
              palette='deep',font='sans-serif',font_scale=1,color_codes=True,rc=None)
# %matplotlib inline

print('Shape:', df.shape,'\n')
print(df.columns)

df.fillna(value=0, inplace=True)

# we have to convert these values into integers for further processing
df[['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',
       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',
       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']].head(10)

def num_conversion(x):
    if type(x) == str:
        return eval(x)
    else:
        return x

# Converting the following columns from string to the integer value for evaluation.
columns = ['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM','RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']

# string to int convrsion
for col in columns :
    df[col] = df[col].apply(num_conversion)

# Resulted Dataframe
df[['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',
       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',
       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']].head(10)

# need for Height and Weight Conversion to integer
df[['Height', 'Weight']].head(2)
def height_convr(x):
    if type(x)== str:
        y= x.split("'")
        return int(y[0]) * 12 + int(y[1])
    else:
        return int(x)

def weight_convr(x):
    if type(x) == str:
        return int(x.split('lbs')[0])
    else:
        return int(x)
df['Height'] = df['Height'].apply(height_convr)
df['Weight'] = df['Weight'].apply(weight_convr)

# Preprocessing the data to fill with meaningful data where some redundancy is there.
df['Body Type'][df['Body Type'] == 'Messi'] = 'Normal'
df['Body Type'][df['Body Type'] == 'Ronaldo'] = 'Lean'
df['Body Type'][df['Body Type'] == 'C. Ronaldo'] = 'Lean'
df['Body Type'][df['Body Type'] == 'Neymar'] = 'Lean'
df['Body Type'][df['Body Type'] == 'Courtois'] = 'Normal'
df['Body Type'][df['Body Type'] == 'PLAYER_BODY_TYPE_25'] = 'Normal'
df['Body Type'][df['Body Type'] == 'Shaqiri'] = 'Lean'
df['Body Type'][df['Body Type'] == 'Akinfenwa'] = 'Normal'
df['Body Type'][df['Body Type'] == 0] = 'Normal'
df['Preferred Foot'][df['Preferred Foot'] == 0] = 'NA'
df['Work Rate'][df['Work Rate'] == 0] = 'Medium/ Medium'
df['Real Face'][df['Real Face'] == 0] = 'No'
df['Position'][df['Position'] == 0] = 'NA'

df['Club'].nunique() 
# There are 652 unique clubs present in the dataset
clubData = {'Club': df.Club, 'Overall' : df.Overall, 
            'Wage': df.Wage}

clubDataDf = pd.DataFrame(clubData, columns = ['Club', 'Overall', 'Wage'])
clubDataDf.sample(3)
# fifadata.Club.value_counts()
dct = dict(df.Club.value_counts())
def findValue(x):
    return dct[x]

clubDataDf.dropna(inplace = True)
overallList =[]
p = 0

''' Dividing the Overall of each row by the Club count so 
 that when we do groupby, we get the appropriate mean 
 Overall value for the club ( kind a normalization )''' 

for i in clubDataDf.values:
    overallList.append( i[1] / findValue( i[0] ) ) 
    
x = np.reshape(overallList, (len(overallList), 1)) 
new_club_data = clubDataDf.drop(columns = ['Overall'], inplace = False)
new_club_data['Overall'] = x

new_club_data['Overall'].isnull().unique().sum()

"""1"""

# Age, Potential, SprintSpeed
data = {'Age': df.Age, 'Potential' : df.Potential}

perf_df = pd.DataFrame(data, columns = ['Age', 'Potential'])
perf_df.sample(3)
ex.box(x='Age', y='Potential', data_frame= perf_df, color='Age', boxmode='overlay', notched=True)

plt.figure(figsize=(10,8))
sns.barplot(x = 'Age', y = 'Potential', data = perf_df)

scaler = StandardScaler()

perf_df_standardised = scaler.fit_transform(perf_df[['Age','Potential']])
perf_df_standardised = pd.DataFrame(perf_df_standardised, columns = ['Age', 'Potential'])
perf_df_standardised.corr()

plt.figure(figsize=(9,4))
sns.heatmap(perf_df.corr(),vmin=-1,cmap='plasma_r',annot=True)

perf_df['Value'] = df['Value']
perf_df.sample(10)

ex.scatter(x='Age', y='Value', data_frame=perf_df,color='Age', opacity=0.5, marginal_x='box')

perf_df['Pace'] = df.SprintSpeed

df["SprintSpeed"]

null = pd.isnull(df["SprintSpeed"]) 
df[null]

plt.figure(figsize=(15,5))
sns.jointplot(x= perf_df['Age'], y= perf_df['Pace'], 
              kind = 'reg', space=0.5, color='#1945c5', ratio=4, height=8)
plt.show()

"""2"""

# skill sets to decide a player's potential 
skill_df = df[["Crossing","Finishing","HeadingAccuracy","ShortPassing","Volleys","Dribbling","Curve","FKAccuracy",
                         "LongPassing","BallControl","Acceleration","SprintSpeed","Agility","Reactions","Balance","ShotPower",
                         "Jumping","Stamina","Strength","LongShots","Aggression","Interceptions","Positioning","Vision",
                         "Penalties","Composure","Marking","StandingTackle","SlidingTackle","GKDiving","GKHandling","GKKicking",
                         "GKPositioning","GKReflexes", "Potential"]]
skill_df.drop_duplicates().sample(10)

# replacing the null values with the minimum of the column values
for index in skill_df.columns :
    skill_df[index].fillna(value = skill_df[index].min(), inplace = True)

plt.figure(figsize=(25,5))
a = skill_df.corr().loc['Potential':]
sns.heatmap(a, vmin=-1, cmap='coolwarm', annot = True)

plt.figure(figsize=(8,4))
sns.scatterplot(x = 'Vision', y = 'Potential', data = skill_df, alpha=0.6)
plt.show()
plt.figure(figsize=(8,4))
sns.scatterplot(x = 'Composure', y = 'Potential', data = skill_df, alpha=0.6)
plt.show()
plt.figure(figsize=(8,4))
sns.scatterplot(x = 'ShortPassing', y = 'Potential', data = skill_df, alpha=0.6)
plt.show()
plt.figure(figsize=(9,4))
sns.scatterplot(x = 'Reactions', y = 'Potential', data = skill_df, palette='Bules_d', alpha=0.5)
plt.show()

# Traits vs Player's Potential
trails_potential_df = {'Special' : df['Special'], 'Height' : df['Height'], 'Weight' : df['Weight'],
                      'Agility' : df['Agility'], 'Composure' : df['Composure'], 'Potential' : df['Potential']}
trails_potential_df = pd.DataFrame(trails_potential_df)
trails_potential_df.head(15)

scaler = StandardScaler()
trails_potential_df[['Special', 'Weight', 'Height', 'Agility', 'Composure', 'Potential']] = scaler.fit_transform(trails_potential_df[['Special', 'Weight', 'Height', 'Agility', 'Composure', 'Potential']])
trails_potential_df.sample(4)

potential = trails_potential_df.corr().loc['Potential':]
potential

plt.figure(figsize=(8,4))
sns.heatmap(potential, vmin=-1, cmap='coolwarm', annot = True)

plt.figure(figsize=(9,6))
sns.scatterplot(x = 'Composure', y = 'Potential', data = trails_potential_df, alpha=0.6)
plt.show()
plt.figure(figsize=(9,6))
sns.scatterplot(x = 'Special', y = 'Potential', data = trails_potential_df, alpha=0.6)
plt.figure(figsize=(9,6))
sns.scatterplot(x = 'Agility', y = 'Potential', data = trails_potential_df, alpha=0.6)

data = {'Age': df['Age'], 'Club' : df['Club']}
age_club_df = pd.DataFrame(data)
age_club_df.sort_values(by='Age').sample(3)

# grouping the data by clubs and getting their mean age
datas = age_club_df.groupby(by='Club', as_index=False).mean() 
datas = datas.sort_values(by = 'Age', ascending = True)

# sorting the grouped by club data according to age in order to get youngest age group club in the beginning
datas.head(10)

ex.bar(x = 'Club', y = 'Age', data_frame= datas.head(15),
      color='Club')

# Commented out IPython magic to ensure Python compatibility.
#import the relevant libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score
# %matplotlib inline

df1=df
sns.boxplot(df1["Age"])

#Function to find the upper and lower limits to identify and remover outliers
def interQuartile(x):
  percentile25= x.quantile(0.25)
  percentile75=x.quantile(0.75)
  iqr=percentile75-percentile25
  upperLimit= percentile75+1.5*iqr
  lowerLimit= percentile25-1.5*iqr
  return upperLimit, lowerLimit


upper,lower= interQuartile(df1['Age'])
print("Lower and upper limit calculated are -", upper, lower)

#To print the number of datapoints below and above these limits
print("Number of entries below the lower limit are ", (df1['Age'] < lower).sum())
print("Number of entries above the upper limit are ", (df1['Age'] > upper).sum())

df1=df1.replace({'Real Face':{'Yes':1, 'No':0}})
df1['Real Face']

df1



"""sample

"""